!function(){function a(a){if(a&&2===a.length)return{x:a[0],y:a[1]};throw new Error("Invalid time series point format")}function b(b){if(b.name&&b.values&&b.values.constructor===Array){var c=b.values,d=c.map(a);return{name:b.name,data:d}}throw new Error("Invalid time series data format")}function c(a){if(a&&a.constructor===Array){var c=[];return a.forEach(function(a){if(!a.results||a.results.constructor!==Array)throw new Error("Invalid time series data format");c=c.concat(a.results.map(b))}),c}throw new Error("Invalid time series data format")}window.px=window.px||{},window.px.timeseries=window.px.timeseries||{},window.px.timeseries.adapter=window.px.timeseries.adapter||{},window.px.timeseries.adapter.kairosdb=window.px.timeseries.adapter.kairosdb||{},window.px.timeseries.adapter.kairosdb={transform:c},window.addEventListener("px-deck-ready",function(a){a.target.init()}),window.px.dealer={getData:function(a,b){if(window.angular){(null===b||"object"!=typeof b)&&(b={});var c=angular.element("body").injector().get("$http");return new Promise(function(d,e){var f=function(a,b,c,e){d(a)},g=function(a,b,c,d){e(a)};/callback=/.test(a)?c.jsonp(a,b).success(f).error(g):c.get(a,b).success(f).error(g)})}},init:function(a,b){this.deckDefinitions=a,this.decksByClassification=b},getDecksByClassification:function(a,b){var c=[],d=this;if(a&&this.decksByClassification&&a in this.decksByClassification){var e=this.decksByClassification[a];b in e&&e[b].forEach(function(a){d.deckDefinitions[a]&&c.push(d.deckDefinitions[a])})}return new Promise(function(a,b){a(c)})},getDeck:function(a){return this.getData(a)}}}();